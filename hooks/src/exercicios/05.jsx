import * as React from 'react'
import VanillaTilt from 'vanilla-tilt' 
//vanilla-tilt causa efeito 3d. N√£o tem nada haver com React. Usar para aprender como integrar bibliotecas externas com o React.


function Tilt({children}) {
  // üê® crie uma ref aqui usando React.useRef()
  const tiltRef = React.useRef()

  // üê® adicione uma fun√ß√£o `React.useEffect` aqui e use VanillaTilt para
  // fazer sua div parecer fant√°stica.
  // üí∞ assim:
  

  React.useEffect(() => {
    const tiltNode = tiltRef.current
    //A biblioteca Vanilla ir√° atuar sobre o elemento ao qual associamos o ref. O ref √© a ponte. 
    VanillaTilt.init(tiltNode, {
      //os pacotes ficam num local chamado npm registry (pesquisa "npm nomedopacote" para ver explica√ß√µes do uso do pacote)
      max: 25,
      speed: 400,
      glare: true,
      'max-glare': 0.5,
    })
    // üí∞ N√£o se esque√ßa de retornar uma fun√ß√£o de limpeza. VanillaTilt.init 
    // vai adicionar um objeto ao seu DOM, precisando ser eliminado:
    return () => {
      tiltNode.vanillaTilt.destroy()
      alert('Desmontado!')
    }
    /*
      Quando um useEffect retorna uma fun√ß√£o, como no caso acima, 
      essa fun√ß√£o ser√° executada na fase de desmontagem do componente, 
      ou seja, qdo o componente for destru√≠do ao descarregar a p√°gina
    */
  }, [])
  
  // üí∞ N√£o se esque√ßa de especificar seu vetor de depend√™ncias! No nosso
  // caso, samemos que o nodo do tilt nunca muda, ent√£o ajuste o vetor para `[]`.

  // üê® adicione a prop `ref` √† div `tilt-root` aqui:
  return (
    //uma div dentro da outra. Na inspe√ß√£o, "selecionar elemento externo", vai ver que criou outras div para criar o efeito 3d.
    //essas div extras ocupam espa√ßo adicional na mem√≥ria e est√£o fora do controle do React porque est√£o em outra biblioteca.
    //boa pr√°tica: desmontar como mostrado acima: return () => tiltNode.vanillaTilt.destroy()
    <div className="tilt-root" ref={tiltRef}> 
      <div className="tilt-child">{children}</div>
    </div>
  )
}

function Exercicio05() {
  return (
    //quando uso o ref posso usar o mesmo elemento mais de uma vez dentro da p√°gina
    //se estivesse usando "id" s√≥ poderia usar uma vez e as outras seriam ignoradas.
    <>
      <Tilt>
        <div className="totally-centered">vanilla-tilt.js</div>
      </Tilt>
      <Tilt>
        <div className="totally-centered">vanilla-tilt.js</div>
      </Tilt>
    </>
  )
}

export default Exercicio05